import os
import json
from typing_extensions import TypedDict
from dotenv import load_dotenv
from langgraph.graph import StateGraph, START, END
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
from gen_ai_hub.proxy.langchain.init_models import init_llm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from datetime import datetime
import re

load_dotenv()

# Define State
class TDDState(TypedDict):
    brd: str
    tdd_text: str
    pdf_path: str

from brd_data import brd_data

llm = init_llm("gpt-4o")
llm = llm.bind(max_completion_tokens=None)

# Technical Design Generation Node
def generate_tdd_node(state: TDDState) -> TDDState:
    prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content="""You are an experienced SAP Technical Consultant. Create a **comprehensive and well-structured Technical Design Document (TDD)** using the following sections:

1. Introduction (Purpose, Scope)
2. Business Requirements
3. Functional Requirements
4. Assumptions and Constraints
5. In-Scope / Out-of-Scope
6. Process Flow Description (describe in text)
7. Use Case Scenarios
8. Screen Layout / Field Mapping (describe if applicable)
9. Security and Roles
10. Error Handling
11. Dependencies
12. Appendix (optional)

Each section should be clearly titled, detailed, and written in a professional tone. Expand on each point with examples or elaboration where appropriate. Base your content on the BRD input provided.
"""),
        HumanMessage(content=f"BRD Content: {state['brd']}")
    ])
    chain = prompt | llm | StrOutputParser()
    tdd_text = chain.invoke({"input": state["brd"]})

    return {
        "brd": state["brd"],
        "tdd_text": tdd_text,
        "pdf_path": ""
    }

# PDF Output Node
def output_tdd_pdf(state: TDDState) -> TDDState:
    styles = getSampleStyleSheet()
    heading_style = ParagraphStyle(
        name='Heading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=10,
        spaceBefore=12,
        leading=16,
        fontName='Helvetica-Bold'
    )
    content_style = ParagraphStyle(
        name='Content',
        parent=styles['Normal'],
        fontSize=11,
        leading=14
    )

    pdf_path = f"TDD_Output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    doc = SimpleDocTemplate(pdf_path, pagesize=letter)
    elements = [Paragraph("Technical Design Document (TDD)", styles['Title']), Spacer(1, 12)]

    known_sections = [
        "Introduction", "Business Requirements", "Functional Requirements",
        "Assumptions and Constraints", "In-Scope / Out-of-Scope",
        "Process Flow Description", "Use Case Scenarios",
        "Screen Layout / Field Mapping", "Security and Roles",
        "Error Handling", "Dependencies", "Appendix"
    ]

    for line in state["tdd_text"].split("\n"):
        clean_line = re.sub(r'^[#*\-]+\s*', '', line.strip())  
        if not clean_line:
            continue

        matched_heading = next((sec for sec in known_sections if sec.lower() in clean_line.lower()), None)
        if matched_heading:
            elements.append(Paragraph(f"âž¤ {matched_heading}", heading_style))
        else:
            elements.append(Paragraph(clean_line, content_style))

        elements.append(Spacer(1, 6))

    doc.build(elements)
    return {
        **state,
        "pdf_path": pdf_path
    }

# Graph Setup
graph = StateGraph(TDDState)
graph.add_node("generate", generate_tdd_node)
graph.add_node("output_pdf", output_tdd_pdf)
graph.add_edge(START, "generate")
graph.add_edge("generate", "output_pdf")
graph.add_edge("output_pdf", END)
app = graph.compile()

# Run
initial_state = {
    "brd": json.dumps(brd_data),
    "tdd_text": "",
    "pdf_path": ""
}

result = app.invoke(initial_state)
print("TDD PDF generated at:", result["pdf_path"])

