import os
import json
from typing_extensions import TypedDict
from dotenv import load_dotenv
from langgraph.graph import StateGraph, START, END
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
from gen_ai_hub.proxy.langchain.init_models import init_llm
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from datetime import datetime

# Load .env
load_dotenv()

# Define State
class FDDState(TypedDict):
    brd: str
    fdd_text: str
    pdf_path: str

from brd_data import brd_data 

# Init LLM
llm = init_llm("gpt-4o")
llm = llm.bind(max_completion_tokens=None)

# Functional Design Generation Node
def generate_fdd_node(state: FDDState) -> FDDState:
    prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content="""You are a Senior SAP Functional Consultant. Create a Functional Design Document (FDD) using the following sections:

1. Introduction (Purpose, Scope)
2. Business Requirements
3. Functional Requirements
4. Assumptions and Constraints
5. In-Scope / Out-of-Scope
6. Process Flow Description (describe in text)
7. Use Case Scenarios
8. Screen Layout / Field Mapping (describe if applicable)
9. Security and Roles
10. Error Handling
11. Dependencies
12. Appendix (optional)

Ensure each section is clearly titled and structured. Base your content on the BRD input provided.
"""),
        HumanMessage(content=f"BRD Content: {state['brd']}")
    ])
    chain = prompt | llm | StrOutputParser()
    fdd_text = chain.invoke({"input": state["brd"]})

    return {
        "brd": state["brd"],
        "fdd_text": fdd_text,
        "pdf_path": ""
    }

# PDF Output Node
def output_fdd_pdf(state: FDDState) -> FDDState:
    styles = getSampleStyleSheet()
    pdf_path = f"FDD_Output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    doc = SimpleDocTemplate(pdf_path, pagesize=letter)
    elements = [Paragraph("Functional Design Document (FDD)", styles['Title'])]

# Split into paragraphs
    for line in state["fdd_text"].split("\n"):
        if line.strip():
            elements.append(Paragraph(line.strip(), styles["Normal"]))

    doc.build(elements)
    return {
        **state,    
        "pdf_path": pdf_path
    }

# Graph Setup
graph = StateGraph(FDDState)
graph.add_node("generate", generate_fdd_node)
graph.add_node("output_pdf", output_fdd_pdf)
graph.add_edge(START, "generate")
graph.add_edge("generate", "output_pdf")
graph.add_edge("output_pdf", END)
app = graph.compile()

# Run
initial_state = {
    "brd": json.dumps(brd_data),
    "fdd_text": "",
    "pdf_path": ""
}

result = app.invoke(initial_state)
print("FDD PDF generated at:", result["pdf_path"])
